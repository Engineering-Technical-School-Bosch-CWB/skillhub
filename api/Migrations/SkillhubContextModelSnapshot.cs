// <auto-generated />
using System;
using Api.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(SkillhubContext))]
    partial class SkillhubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max) filestream")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("extension");

                    b.Property<Guid>("FileGuid")
                        .HasColumnType("uniqueidentifier rowguidcol")
                        .HasColumnName("file_guid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Attachment");

                    b.HasAlternateKey("FileGuid");

                    b.HasIndex("post_id");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("DurationPeriods")
                        .HasColumnType("tinyint")
                        .HasColumnName("duration_periods");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<short>("StartingYear")
                        .HasColumnType("smallint")
                        .HasColumnName("starting_year");

                    b.Property<int>("course_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Class");

                    b.HasIndex("course_id");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("abbreviation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("default_occupation_area_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Course");

                    b.HasIndex("default_occupation_area_id");

                    b.ToTable("course", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.CurricularUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("subject_area_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____CurricularUnit");

                    b.HasIndex("subject_area_id");

                    b.ToTable("curricular_unit", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("AppliedAt")
                        .HasColumnType("date")
                        .HasColumnName("applied_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("instructor_id")
                        .HasColumnType("int");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Exam");

                    b.HasIndex("instructor_id");

                    b.HasIndex("subject_id");

                    b.ToTable("exam", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("content");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("StudentMayVisualize")
                        .HasColumnType("bit")
                        .HasColumnName("student_may_visualize");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("instructor_id")
                        .HasColumnType("int");

                    b.Property<int>("student_id")
                        .HasColumnType("int");

                    b.Property<int?>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Feedback");

                    b.HasIndex("instructor_id");

                    b.HasIndex("student_id");

                    b.HasIndex("subject_id");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Objection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("ClaimedAptitude")
                        .HasColumnType("smallint")
                        .HasColumnName("claimed_aptitude");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit")
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateOnly>("ObjectedAt")
                        .HasColumnType("date")
                        .HasColumnName("objected_at");

                    b.Property<short>("OfficialAptitude")
                        .HasColumnType("smallint")
                        .HasColumnName("official_aptitude");

                    b.Property<int>("skill_result_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Objection");

                    b.HasIndex("skill_result_id");

                    b.ToTable("objection", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.OccupationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK____OccupationArea");

                    b.ToTable("occupation_area", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<byte>("PermissionLevel")
                        .HasColumnType("tinyint")
                        .HasColumnName("permission_level");

                    b.Property<byte>("PositionType")
                        .HasColumnType("tinyint")
                        .HasColumnName("position_type");

                    b.HasKey("Id")
                        .HasName("PK____Position");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("body");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Post");

                    b.HasIndex("subject_id");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK____Sector");

                    b.ToTable("sector", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("EvaluationCriteria")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("evaluation_criteria");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("curricular_unit_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Skill");

                    b.HasIndex("curricular_unit_id");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.SkillResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<short?>("Aptitude")
                        .HasColumnType("smallint")
                        .HasColumnName("aptitude");

                    b.Property<DateTime?>("EvaluatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("evaluated_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.Property<int?>("exam_id")
                        .HasColumnType("int");

                    b.Property<int?>("objection_id")
                        .HasColumnType("int");

                    b.Property<int>("skill_id")
                        .HasColumnType("int");

                    b.Property<int>("student_id")
                        .HasColumnType("int");

                    b.Property<int?>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____SkillResult");

                    b.HasIndex("exam_id");

                    b.HasIndex("objection_id");

                    b.HasIndex("skill_id");

                    b.HasIndex("student_id");

                    b.HasIndex("subject_id");

                    b.ToTable("skill_result", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.SpecificObjectives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EvaluationCriteria")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("evaluation_criteria");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("identification");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Ressources")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("ressources");

                    b.Property<int>("Time")
                        .HasColumnType("int")
                        .HasColumnName("time");

                    b.Property<int>("subject_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____SpecificObjectives");

                    b.HasIndex("subject_id");

                    b.ToTable("specific_objectives", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double?>("OverallScore")
                        .HasColumnType("float")
                        .HasColumnName("overall_score");

                    b.Property<double?>("OverallSkillScore")
                        .HasColumnType("float")
                        .HasColumnName("overall_skill_score");

                    b.Property<int>("class_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Student");

                    b.HasIndex("class_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("BeganAt")
                        .HasColumnType("date")
                        .HasColumnName("began_at");

                    b.Property<double>("DurationHours")
                        .HasColumnType("float")
                        .HasColumnName("duration_hours");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<byte?>("Period")
                        .HasColumnType("tinyint")
                        .HasColumnName("period");

                    b.Property<int>("class_id")
                        .HasColumnType("int");

                    b.Property<int>("curricular_unit_id")
                        .HasColumnType("int");

                    b.Property<int?>("instructor_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____Subject");

                    b.HasIndex("class_id");

                    b.HasIndex("curricular_unit_id");

                    b.HasIndex("instructor_id");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.SubjectArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK____SubjectArea");

                    b.ToTable("subject_area", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("hash");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("identification");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<int>("occupation_area_id")
                        .HasColumnType("int");

                    b.Property<int>("position_id")
                        .HasColumnType("int");

                    b.Property<int>("sector_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____User");

                    b.HasIndex("occupation_area_id");

                    b.HasIndex("position_id");

                    b.HasIndex("sector_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FileGuid")
                        .HasColumnType("uniqueidentifier rowguidcol")
                        .HasColumnName("file_guid");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max) filestream")
                        .HasColumnName("image");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK____UserImage");

                    b.HasAlternateKey("FileGuid");

                    b.HasIndex("user_id");

                    b.ToTable("user_image", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Models.Attachment", b =>
                {
                    b.HasOne("Api.Domain.Models.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Api.Domain.Models.Class", b =>
                {
                    b.HasOne("Api.Domain.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Api.Domain.Models.Course", b =>
                {
                    b.HasOne("Api.Domain.Models.OccupationArea", "DefaultOccupationArea")
                        .WithMany("Courses")
                        .HasForeignKey("default_occupation_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultOccupationArea");
                });

            modelBuilder.Entity("Api.Domain.Models.CurricularUnit", b =>
                {
                    b.HasOne("Api.Domain.Models.SubjectArea", "SubjectArea")
                        .WithMany("CurricularUnits")
                        .HasForeignKey("subject_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectArea");
                });

            modelBuilder.Entity("Api.Domain.Models.Exam", b =>
                {
                    b.HasOne("Api.Domain.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("instructor_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.Domain.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Domain.Models.Feedback", b =>
                {
                    b.HasOne("Api.Domain.Models.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("instructor_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("subject_id");

                    b.Navigation("Instructor");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Domain.Models.Objection", b =>
                {
                    b.HasOne("Api.Domain.Models.SkillResult", "SkillResult")
                        .WithMany("Objections")
                        .HasForeignKey("skill_result_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillResult");
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.HasOne("Api.Domain.Models.Subject", "Subject")
                        .WithMany("Posts")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Domain.Models.Skill", b =>
                {
                    b.HasOne("Api.Domain.Models.CurricularUnit", "CurricularUnit")
                        .WithMany("Skills")
                        .HasForeignKey("curricular_unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurricularUnit");
                });

            modelBuilder.Entity("Api.Domain.Models.SkillResult", b =>
                {
                    b.HasOne("Api.Domain.Models.Exam", "Exam")
                        .WithMany("SkillResults")
                        .HasForeignKey("exam_id");

                    b.HasOne("Api.Domain.Models.Objection", "Objection")
                        .WithMany()
                        .HasForeignKey("objection_id");

                    b.HasOne("Api.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("skill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("subject_id");

                    b.Navigation("Exam");

                    b.Navigation("Objection");

                    b.Navigation("Skill");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Domain.Models.SpecificObjectives", b =>
                {
                    b.HasOne("Api.Domain.Models.Subject", "Subject")
                        .WithMany("SpecificObjectives")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Api.Domain.Models.Student", b =>
                {
                    b.HasOne("Api.Domain.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Api.Domain.Models.Student", "user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Models.Subject", b =>
                {
                    b.HasOne("Api.Domain.Models.Class", "Class")
                        .WithMany("Subjects")
                        .HasForeignKey("class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.CurricularUnit", "CurricularUnit")
                        .WithMany("Subjects")
                        .HasForeignKey("curricular_unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.User", "Instructor")
                        .WithMany("Subjects")
                        .HasForeignKey("instructor_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Class");

                    b.Navigation("CurricularUnit");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Api.Domain.Models.User", b =>
                {
                    b.HasOne("Api.Domain.Models.OccupationArea", "OccupationArea")
                        .WithMany("Users")
                        .HasForeignKey("occupation_area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("position_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Models.Sector", "Sector")
                        .WithMany("Users")
                        .HasForeignKey("sector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OccupationArea");

                    b.Navigation("Position");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Api.Domain.Models.UserImage", b =>
                {
                    b.HasOne("Api.Domain.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Domain.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Api.Domain.Models.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Api.Domain.Models.CurricularUnit", b =>
                {
                    b.Navigation("Skills");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Api.Domain.Models.Exam", b =>
                {
                    b.Navigation("SkillResults");
                });

            modelBuilder.Entity("Api.Domain.Models.OccupationArea", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Api.Domain.Models.Position", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Api.Domain.Models.Post", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Api.Domain.Models.Sector", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Api.Domain.Models.SkillResult", b =>
                {
                    b.Navigation("Objections");
                });

            modelBuilder.Entity("Api.Domain.Models.Student", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Api.Domain.Models.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Posts");

                    b.Navigation("SpecificObjectives");
                });

            modelBuilder.Entity("Api.Domain.Models.SubjectArea", b =>
                {
                    b.Navigation("CurricularUnits");
                });

            modelBuilder.Entity("Api.Domain.Models.User", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
